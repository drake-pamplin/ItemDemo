/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package code.controller;

import java.io.IOException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;

import code.VO.Item;
import code.exception.InvalidArgException;
import code.exception.InvalidCommandException;
import code.repository.ItemRepository;
import code.service.HelpService;
import code.service.ItemService;
import code.utils.Constants;

public class ItemController {
    private Scanner scanner = new Scanner(System.in);

    private HelpService helpService;
    private ItemService itemService;

    private boolean appActive = true;
    private String outputString = "";

    public ItemController(HelpService helpService, ItemService itemService) {
        this.helpService = helpService;
        this.itemService = itemService;
    }
    
    public static void main(String[] args) {
        ItemController controller = new ItemController(new HelpService(), new ItemService(new ItemRepository()));

        try {
            while (controller.appActive) {
                controller.ClearScreen();
                // Display any outputs.
                if (controller.outputString != null && !controller.outputString.isEmpty()) {
                    System.out.println(controller.outputString);
                    controller.outputString = "";
                    controller.PrintBreak();
                }

                // Display the prompt.
                String prompt = String.format(Constants.messageHelpCommand, Constants.commandHelp) + "\n" + Constants.prompt;
                System.out.print(prompt);
                String input = controller.scanner.nextLine();

                // Parse the input.
                try {
                    controller.ParseCommand(input);
                } catch (InvalidArgException e) {
                    if (Constants.exceptionMessageItemsEmpty.equals(e.getField())) {
                        controller.outputString = Constants.exceptionOutputNoItems;
                    } else if (Constants.fieldKey.equals(e.getField())) {
                        controller.outputString = Constants.exceptionOutputKeyDoesNotExist;
                    } else if (Constants.fieldMember.equals(e.getField())) {
                        if (e.getIssue().contains("already exists")) {
                            controller.outputString = Constants.exceptionOutputMemberAlreadyExists;
                        } else {
                            controller.outputString = Constants.exceptionOutputMemberDoesNotExist;
                        }
                    } else if (Constants.fieldInput.equals(e.getField())) {
                        controller.outputString = Constants.exceptionOutputCommandMissingArgument;
                    } else if (Constants.fieldItemList.equals(e.getField())) {
                        controller.outputString = Constants.exceptionOutputNoItems;
                    } else {
                        controller.outputString = "Unexpected error encountered: " + e.getIssue();
                    }
                } catch (InvalidCommandException e) {
                    controller.outputString = String.format(Constants.excpetionOutputCommandNotRecognized, e.getCommand());
                }
            }
        } catch (IllegalStateException | NoSuchElementException | InterruptedException | IOException e) {
            System.out.println(Constants.exceptionMessageApplicationFailure + e.getMessage());
        }

        controller.scanner.close();
    }

    // Clears the console when called.
    private void ClearScreen() throws InterruptedException, IOException {
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
    }

    // Parses the player input.
    private void ParseCommand(String input) throws InvalidArgException, InvalidCommandException {
        // Split command into individual words.
        String[] inputSplit = input.split(" ");

        // Ensure input was put in the first place.
        if (inputSplit.length == 0) {
            throw new InvalidArgException(Constants.exceptionMessageGeneric, Constants.fieldInput, Constants.exceptionMessageInputEmpty);
        }

        // Check first word and process command accordingly.
        switch (inputSplit[0].toUpperCase()) {
            case Constants.commandAdd:
                ProcessAddCommand(inputSplit);
                break;
            case Constants.commandRemove:
                ProcessRemoveCommand(inputSplit);
                break;
            case Constants.commandKeys:
                ProcessKeysCommand();
                break;
            case Constants.commandMembers:
                ProcessMembersCommand(inputSplit);
                break;
            case Constants.commandRemoveAll:
                ProcessRemoveAllCommand(inputSplit);
                break;
            case Constants.commandClear:
                ProcessClearCommand();
                break;
            case Constants.commandKeyExists:
                ProcessKeyExistsCommand(inputSplit);
                break;
            case Constants.commandMemberExists:
                ProcessMemberExistsCommand(inputSplit);
                break;
            case Constants.commandAllMembers:
                ProcessAllMembersCommand();
                break;
            case Constants.commandItems:
                ProcessItemsCommand();
                break;
            case Constants.commandQuit:
                ProcessQuitCommand();
                break;
            case Constants.commandHelp:
                ProcessHelpCommand();
                break;
            default:
                throw new InvalidCommandException(Constants.exceptionMessageGeneric, input);
        }
    }

    // Adds a line break for easier visual parsing.
    private void PrintBreak() {
        System.out.println("\n");
    }

    // Process the add command.
    private void ProcessAddCommand(String[] input) throws InvalidArgException {
        // Validate command args are present.
        if (input.length < 3) {
            throw new InvalidArgException(Constants.exceptionMessageGeneric, Constants.fieldInput, Constants.exceptionMessageInputArgMissing);
        }
        
        // Execute command.
        itemService.AddMemberToKey(input[1], input[2]);

        // Populate output.
        outputString = Constants.messageAddComplete;
    }

    // Process the all members command.
    private void ProcessAllMembersCommand() throws InvalidArgException {
        // Execute command.
        List<String> memberList = itemService.GetAllMembers();
        String output = "";
        for (int listIndex = 1; listIndex <= memberList.size(); listIndex++) {
            if (listIndex != 1) {
                output += "\n";
            }

            output += String.format(Constants.messageAllMembersOutput, listIndex, memberList.get(listIndex - 1));
        }

        // Populate output.
        outputString = output;
    }

    // Process the clear command.
    private void ProcessClearCommand() {
        // Execute command.
        itemService.ClearRepository();

        // Populate output.
        outputString = Constants.messageClearComplete;
    }

    // Process the help command.
    private void ProcessHelpCommand() {
        // Execute command and populate output.
        outputString = helpService.getCommandList();
    }

    // Process the items command.
    private void ProcessItemsCommand() throws InvalidArgException {
        // Execute command.
        List<Item> itemList = itemService.GetAllItems();

        // Populate output.
        String output = "";
        int count = 1;
        for (int listIndex = 0; listIndex < itemList.size(); listIndex++) {
            Item item = itemList.get(listIndex);
            for (int memberIndex = 0; memberIndex < item.getMembers().size(); memberIndex++) {
                if (count != 1) {
                    output += "\n";
                }

                output += String.format(Constants.messageItemsOutput, count, item.getKey(), item.getMembers().get(memberIndex));
                count++;
            }
        }

        // Populate output.
        outputString = output;
    }

    // Process the key exists command.
    private void ProcessKeyExistsCommand(String[] input) throws InvalidArgException {
        // Validate args.
        if (input.length < 2) {
            throw new InvalidArgException(Constants.exceptionMessageGeneric, Constants.fieldInput, Constants.exceptionMessageInputArgMissing);
        }

        // Execute command.
        boolean exists = itemService.ContainsKey(input[1]);

        // Populate output.
        outputString = String.format(Constants.messageKeyExistsOutput, exists);
    }

    // Process the keys command.
    private void ProcessKeysCommand() throws InvalidArgException {
        // Execute command.
        List<String> keyList = itemService.GetAllKeys();

        String output = "";
        for (int listIndex = 1; listIndex <= keyList.size(); listIndex++) {
            if (listIndex != 1) {
                output += "\n";
            }

            output += String.format(Constants.messageKeysOutput, listIndex, keyList.get(listIndex - 1));
        }

        // Populate output.
        outputString = output;
    }

    // Process the member exists command.
    private void ProcessMemberExistsCommand(String[] input) throws InvalidArgException {
        // Validate args.
        if (input.length < 3) {
            throw new InvalidArgException(Constants.exceptionMessageGeneric, Constants.fieldInput, Constants.exceptionMessageInputArgMissing);
        }

        // Execute command.
        boolean exists = itemService.MemberExists(input[1], input[2]);

        // Populate output.
        outputString = String.format(Constants.messageMemberExistsOutput, exists);
    }

    // Process the members command.
    private void ProcessMembersCommand(String[] input) throws InvalidArgException {
        // Validate args.
        if (input.length < 2) {
            throw new InvalidArgException(Constants.exceptionMessageGeneric, Constants.fieldInput, Constants.exceptionMessageInputArgMissing);
        }

        // Execute command.
        List<String> memberList = itemService.GetAllMembersForKey(input[1]);

        // Populate output.
        String output = "";
        for (int listIndex = 1; listIndex <= memberList.size(); listIndex++) {
            if (listIndex != 1) {
                output += "\n";
            }

            output += String.format(Constants.messageMembersOutput, listIndex, memberList.get(listIndex - 1));
        }

        outputString = output;
    }

    // Process the quit command.
    private void ProcessQuitCommand() {
        appActive = false;
    }

    // Process the remove all command.
    private void ProcessRemoveAllCommand(String[] input) throws InvalidArgException {
        // Validate args.
        if (input.length < 2) {
            throw new InvalidArgException(Constants.exceptionMessageGeneric, Constants.fieldInput, Constants.exceptionMessageInputArgMissing);
        }

        // Execute command.
        itemService.RemoveAllMembersForKey(input[1]);

        // Populate output.
        outputString = Constants.messageRemoveAllOutput;
    }

    // Process the remove command.
    private void ProcessRemoveCommand(String[] input) throws InvalidArgException {
        // Validate args.
        if (input.length < 3) {
            throw new InvalidArgException(Constants.exceptionMessageGeneric, Constants.fieldInput, Constants.exceptionMessageInputArgMissing);
        }

        // Execute command.
        itemService.RemoveMemberFromKey(input[1], input[2]);

        // Populate output.
        outputString = Constants.messageRemoveOutput;
    }
}
